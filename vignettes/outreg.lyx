#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass sweavel-article
\begin_preamble
%\VignetteIndexEntry{Using rockchalk}

\usepackage{Sweavel}
\usepackage{graphicx}
\usepackage{color}

\usepackage[samesize]{cancel}



\usepackage{ifthen}

\makeatletter

\renewenvironment{figure}[1][]{%

 \ifthenelse{\equal{#1}{}}{%

   \@float{figure}

 }{%

   \@float{figure}[#1]%

 }%

 \centering

}{%

 \end@float

}

\renewenvironment{table}[1][]{%

 \ifthenelse{\equal{#1}{}}{%

   \@float{table}

 }{%

   \@float{table}[#1]%

 }%

 \centering

%  \setlength{\@tempdima}{\abovecaptionskip}%

%  \setlength{\abovecaptionskip}{\belowcaptionskip}%

% \setlength{\belowcaptionskip}{\@tempdima}%

}{%

 \end@float

}


%\usepackage{listings}
% Make ordinary listings look as if they come from Sweave
\lstset{tabsize=2, breaklines=true,style=Rstyle}

% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\scriptsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.90}}
\end_preamble
\use_default_options true
\begin_modules
sweave
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Using rockchalk for Quick & Consistent Regression Presentations
\end_layout

\begin_layout Author
Paul Johnson
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{ae=F,nogin=T}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, echo=F>>=
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The rockchalk package is an agglomeration of functions that I need when
 I'm teaching about regression.
 The functions here divide into three categories.
 
\end_layout

\begin_layout Enumerate
Functions that help me prepare lectures.
 The function to create LaTeX tables from regression output, outreg, falls
 into this category.
 It speeds up the preparation of lectures immensely to include table generating
 code that 
\begin_inset Quotes eld
\end_inset

just works
\begin_inset Quotes erd
\end_inset

 with R output.
 Some functions in R are very hard to use and get right consistently, especially
 where 3 dimensional plotting is concerned.
 That's where functions like mcGraph1, mcGraph2, mcGraph3, and plotPlane
 come in handy.
 These don't do any work that is particularly original, but they do help
 to easily make the multidimensional plots that turn out 
\begin_inset Quotes eld
\end_inset

about right
\begin_inset Quotes erd
\end_inset

 most of the time.
 
\end_layout

\begin_layout Enumerate
Functions simplify vital chores that are difficult for regression students.
 I often ask students to plot several regression lines, 
\begin_inset Quotes eld
\end_inset

one for each sub-group of respondents,
\begin_inset Quotes erd
\end_inset

 and this sometimes proves frustrating.
 The function plotSlopes is offered as my suggestion for creating interaction
 plots of 
\begin_inset Quotes eld
\end_inset

simple slopes
\begin_inset Quotes erd
\end_inset

.
 This handles the work of calculating predicted values and drawing them
 for several possible values of a third variable.
 plotPlane is along the same line.
 If students find that useful, they can then use the examples to build up
 more complicated drawings.
\end_layout

\begin_layout Enumerate
Functions that people often ask for, even if they might be unwise.
 A funtion to estimate a 
\begin_inset Quotes eld
\end_inset

standardised regression
\begin_inset Quotes erd
\end_inset

 is offered.
 Although that is clearly unwise (in the eyes of many), some folks still
 want to calculate 
\begin_inset Quotes eld
\end_inset

beta weights.
\begin_inset Quotes erd
\end_inset

 Some functions, such as meanCenter and residualCenter, are offered not
 because I need those tools, but because other people propose them the use
 of my students.
 Those procedures are, possibly, not truly helpful and in order to demonstrate
 that fact, I have to provide the functions.
\end_layout

\begin_layout Section
Some outreg Examples.
\end_layout

\begin_layout Standard
outreg was a function in search of a package for a long time.
 I didn't bother to build rockchalk until I had some other worthwhile functions.
 So it seems appropriate to start with outreg.
\end_layout

\begin_layout Standard
On May 8, 2006, Dave Armstrong, a political science PhD student at University
 of Maryland, posted a code snippet in r-help that demonstrated one way
 to use the 
\begin_inset Quotes eld
\end_inset

cat
\begin_inset Quotes erd
\end_inset

 function from R to write LaTeX markup.
 That gave me the idea to write a LaTeX output scheme that would help create
 some nice looking term and research papers.
 I'd been frustrated with the LaTeX output from other R functions.
 I needed a table-maker to include all of the required information in a
 regression table without including a lot of chaff (in my opinion).
 I don't want both the standard error of b and the t value, I never want
 p values, I need stars for the significant variables, and I want a minimally
 sufficient set of summary statistics.
 In 2006, there was no function that met those needs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These models are created with some simulated data.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T>>=
\end_layout

\begin_layout Plain Layout

set.seed(1234)
\end_layout

\begin_layout Plain Layout

x1 <- rnorm(100)
\end_layout

\begin_layout Plain Layout

x2 <- rnorm(100)
\end_layout

\begin_layout Plain Layout

y1 <- 5*rnorm(100) - 3*x1 + 4*x2
\end_layout

\begin_layout Plain Layout

y2 <- rnorm(100)+5*x2
\end_layout

\begin_layout Plain Layout

dat <- data.frame(x1, x2, y1, y2)
\end_layout

\begin_layout Plain Layout

rm (x1, x2, y1, y2)
\end_layout

\begin_layout Plain Layout

m1 <- lm (y1~x1, data=dat)
\end_layout

\begin_layout Plain Layout

m2 <- lm (y1~x2, data=dat)
\end_layout

\begin_layout Plain Layout

m3 <- lm (y1 ~ x1 + x2, data=dat)
\end_layout

\begin_layout Plain Layout

myilogit <- function(x) exp(x)/(1 + exp(x))
\end_layout

\begin_layout Plain Layout

y3 <- rbinom(100, size=1, p=myilogit(scale(dat$y1)))
\end_layout

\begin_layout Plain Layout

gm1 <- glm(y3~x1 + x2, data=dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In each of the floating tables, I have presented an example use of the 
\begin_inset Quotes eld
\end_inset

outreg
\begin_inset Quotes erd
\end_inset

 function along with the regression table that it creates.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
My One Tightly Printed Regression
\begin_inset CommandInset label
LatexCommand label
name "tab:Tab1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg10, results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(m1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tab1"

\end_inset

 displays the default output, without any special options.
 The command is
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=hide>>=
\end_layout

\begin_layout Plain Layout

<<outreg10>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset

, 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
My Spread Out Regressions
\begin_inset CommandInset label
LatexCommand label
name "tab:Tab2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg20, results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(m1, tight=FALSE, modelLabels=c("Fingers"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the literature, regression tables are sometimes presented in a tight
 column format, with the estimates of the coefficients and standard errors
 
\begin_inset Quotes eld
\end_inset

stacked up
\begin_inset Quotes erd
\end_inset

 to allow multiple models side by side, while sometimes they are printed
 with separate columns for the coefficients and standard errors.
 The outreg option tight=F provides the two column style.
 In Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tab2"

\end_inset

, I've also used the argument modelLabels to insert the word 
\begin_inset Quotes eld
\end_inset

Fingers
\begin_inset Quotes erd
\end_inset

 above the regression model.
 The command that produces the table is
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=hide>>=
\end_layout

\begin_layout Plain Layout

<<outreg20>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
My Two Linear Regressions Tightly Printed
\begin_inset CommandInset label
LatexCommand label
name "tab:Tab3"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
(a) Tightly Formatted Columns
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg30, results=tex, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m1,m2), modelLabels=c("Mine","Yours"), varLabels = list(x1="Billie")
)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
(b) Two Columns Per Regression Model
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg33, results=tex, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m1,m2), tight=FALSE,  modelLabels=c("Mine","Yours"), varLabels
 = list(x1="Billie"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The outreg function can present different models in a single table, as we
 see in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tab3"

\end_inset

.
 The default output uses the tight format, so there is no need to specify
 that explicitly.
 In part (a) of Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tab3"

\end_inset

, we have tightly formatted columns of regression output that result from
 this command:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=hide>>=
\end_layout

\begin_layout Plain Layout

<<outreg30>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

To my eye, there is something pleasant about the less-tightly-packed format,
 as illustrated in part (b) of Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tab3"

\end_inset

.
 Note that the only difference in the commands that produce those tables
 is the insertion of tight=FALSE.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=hide>>=
\end_layout

\begin_layout Plain Layout

<<outreg33>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
My Three Linear Regressions in a Tight Format
\begin_inset CommandInset label
LatexCommand label
name "tab:3tight"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg35, results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m1,m2,m3), modelLabels=c("A","B","C"), varLabels = list(x1="I
 Forgot x1", x2="He Remembered x2"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset

In addition to using modelLables to provide headings for the 2 models, the
 other argument that was used in Table is 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tab3"

\end_inset

 varLabels.
 It is often a problem that the variables in the R program are terse, while
 a presentation must have a full name.
 So in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tab3"

\end_inset

, I've demonstrated how to replace the variable name x1 with the word 
\begin_inset Quotes eld
\end_inset

Billie
\begin_inset Quotes erd
\end_inset

.
 Any of the predictor variables can be re-named in this way.
 Another usage of varLabels is offered in an example with three models in
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:3tight"

\end_inset

, which is a result of
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=hide>>=
\end_layout

\begin_layout Plain Layout

<<outreg35>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

As one can see, outreg gracefully handles the situation in which variables
 are inserted or removed from a fitted model.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Three Regressions in the Spread out Format
\begin_inset CommandInset label
LatexCommand label
name "tab:3RegNotTIght"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m1,m2,m3), tight=F, modelLabels=c("I Love love love really long
 titles","Hate Long","Medium"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I have not bothered with some fine points of LaTeX table formatting.
 I also have not worried about the problem of restricting columns to use
 the exact same amount of horizontal space.
 In Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:3RegNotTIght"

\end_inset

, we have regression output which is, in my opinion, completely acceptable
 for inclusion in a presentation or conference paper.
 Because the model labels are not equal in length, the columns are not equally
 sized.
 That is not a concern for me, at the moment, but I imagine it might be
 a concern for somebody.
 Perhaps, at some point, I may come back and deal with the problem that
 decimal values within columns should be vertically aligned (at least as
 an option).
 I don't want to make outreg output dependent on additional LaTeX packages.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Combined OLS and GLM Estimates
\begin_inset CommandInset label
LatexCommand label
name "tab:Combined-OLSGLM"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg70, results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m1,gm1),modelLabels=c("OLS:y1","GLM: Categorized y1"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another feature of outreg is that it can present the estimates of different
 kinds of models.
 It can present the estimates from R's lm and glm functions in a single
 table.
 Consider Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Combined-OLSGLM"

\end_inset

, which resulted from the command
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=hide>>=
\end_layout

\begin_layout Plain Layout

<<outreg70>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At one time, I was working on a similar presentation for mixed models estimated
 by lme4, but I stopped that effort because the lme4 package was changing
 rapidly and the format of its returned objects was not stable enough for
 a finalized presentation format.
 Eventually, I will include a method to display those mixed models.
 
\end_layout

\begin_layout Section
plotPlane and plotCurves
\end_layout

\begin_layout Standard
The goal of plotPlane and plotCurves is to speed up the process of visualization
 in regression analysis.
 plotPlane offers a 3 dimensional drawing that uses R's persp function to
 do the heavy lifting.
 plotCurves tries to press that same information into a two dimensional
 display by drawing curves for several different values of a moderator variable.
 Both plotPlane and plotCurves allow nonlinear terms in the regression model
 that is being plotted.
 In that sense, they are more similar to R's own termplot function than
 to other similar tools.
 
\end_layout

\begin_layout Standard
In this section, I create a new dependent variable y5 and then put the fitted
 model through the plotSlopes and plotPlane functions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

dat$y5 <- with(dat, -3*x1 + 0.5*log(x2^2) + 1.1*x2 + 2.2 *x1 * x2 + 3*rnorm(100))
 
\end_layout

\begin_layout Plain Layout

m5 <- lm (y5 ~ log(x2*x2) + x1 * x2, data=dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pcps10"

\end_inset

, plotPlane allows the depiction of a 3 dimensional plane that 
\begin_inset Quotes eld
\end_inset

sits
\begin_inset Quotes erd
\end_inset

 in the cloud of data points.
 The variables that are not explicitly pictured in the plotPlane figure
 are set to reference values.
 As illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pcps20"

\end_inset

, plotCurves is a 2 dimensional depiction of the same information.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pcps10, fig=T, height=4, width=4>>=
\end_layout

\begin_layout Plain Layout

plotPlane(m5, plotx1="x1", plotx2="x2")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<results=tex>>=
\end_layout

\begin_layout Plain Layout

outreg(m5, tight=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
plotPlane
\begin_inset CommandInset label
LatexCommand label
name "fig:pcps10"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pcps20, fig=T, height=6, width=6>>=
\end_layout

\begin_layout Plain Layout

plotCurves(m5, plotx="x1", modx="x2")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
plotCurves
\begin_inset CommandInset label
LatexCommand label
name "fig:pcps20"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Plot and Test Simple Slopes
\end_layout

\begin_layout Standard
In psychology, methodologists have recommended the analysis of 
\begin_inset Quotes eld
\end_inset

simple slopes
\begin_inset Quotes erd
\end_inset

 to depict the effect of several variables in a 2 dimensional plot.
 This is most often of interest in the analysis of regression models with
 interactive terms.
 Suppse the fitted model is, 
\begin_inset Formula 
\begin{equation}
\hat{y}_{i}=\hat{b}_{0}+\hat{b}_{1}x1_{i}+\hat{b}_{2}x2_{i}+\hat{b}_{3}x1_{i}x2_{i}+x3_{i}.As
\end{equation}

\end_inset

The idea is to consider the effect of 
\begin_inset Formula $x1$
\end_inset

 on 
\begin_inset Formula $y$
\end_inset

 for several values of 
\begin_inset Formula $x2$
\end_inset

, keeping 
\begin_inset Formula $x3_{i}$
\end_inset

 set at some reference value (the mean for numeric variables).
 As a follow-up, one wants to test whether the plotted effects are statistically
 significantly different from zero.
 
\end_layout

\begin_layout Standard
This is only truly interesting when there are interaction effects, of course,
 but I begin with a simple linear model.
 Recall that
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

m3 <- lm (y1 ~ x1 + x2, data=dat)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ps10"

\end_inset

 illustrates the plotSlopes function for two use cases.
 The first is
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plotSlopes(m3, plotx="x1", modx="x2", xlab="x1 is a Continuous Predictor")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The plotx argument is variable x1, meaning that x1 will be the horizontal
 axis, and x2 serves as the moderator variable.
 By default, three hypothetical values of x2 are selected (in this case
 the quantiles 25%, 50%, and 75%).
 The second example in that figure illustrates user-selected values for
 the moderator.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
\noindent

plotSlopes(m3, plotx="x1", modx="x2", modxVals=c(-0.2, 0.5, 0.9), xlab="Continuous
 Predictor")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps10, fig=T, echo=F, height=9, width=4>>=
\end_layout

\begin_layout Plain Layout

par(mfcol=c(2,1))
\end_layout

\begin_layout Plain Layout

m3psa <- plotSlopes(m3, plotx="x1", modx="x2", xlab="x1 is a Continuous
 Predictor")
\end_layout

\begin_layout Plain Layout

m3psb <- plotSlopes(m3, plotx="x1", modx="x2", modxVals=c(0.2, 0.5, 0.7), xlab="Con
tinuous Predictor")
\end_layout

\begin_layout Plain Layout

par(mfcol=c(1,1))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
plotSlopes In an Additive Model
\begin_inset CommandInset label
LatexCommand label
name "fig:ps10"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

testSlopes(m3psa)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That model is linear, so lines are parallel.
 We need to introduce some interaction effects in order to exploit the new
 functions proposed here.
 Suppose we generate a new dependent variable and fit a regression with
 an interaction: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps15>>=
\end_layout

\begin_layout Plain Layout

dat$y4 <- with(dat, -3*x1 + 6*x2 - 0.17*x1*x2 + 5*rnorm(100))
\end_layout

\begin_layout Plain Layout

m4 <- lm (y4 ~ x1 * x2, data=dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A figure with lines for some values of the moderator x2, along with hypothesis
 test for those estimates, is obtained with the following.
 The 
\begin_inset Quotes eld
\end_inset

simple slope
\begin_inset Quotes erd
\end_inset

 lines that model are presented in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ps20"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

m4ps <- plotSlopes(m4, plotx="x1", modx="x2", xlab="Continuous Predictor")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps20, fig=T, echo=T>>=
\end_layout

\begin_layout Plain Layout

m4ps <- plotSlopes(m4, plotx="x1", modx="x2", xlab="Continuous Predictor")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
plotSlopes for an Interactive Model
\begin_inset CommandInset label
LatexCommand label
name "fig:ps20"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aiken and West (and later Cohen, Cohen, West, and Aiken) propose using the
 t test to find out if the effect of the 
\begin_inset Quotes eld
\end_inset

plotx
\begin_inset Quotes erd
\end_inset

 variable is statistically significant for each particular value of 
\begin_inset Quotes eld
\end_inset

modx,
\begin_inset Quotes erd
\end_inset

 the moderator variable.
 The testSlopes function delivers those t tests.
 Each of the lines represents a test of the hypothesis that 
\begin_inset Formula 
\begin{equation}
H_{0}:0=\hat{b}_{simple\, slope}=\hat{b}_{plotx}+b_{plotx\cdot modx}modx
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
where 
\begin_inset Formula $modx$
\end_inset

 is the numeric value of the moderator variable and 
\begin_inset Formula $plotx$
\end_inset

 is the variable that is plotted on the horizontal axis in the plotSlopes
 output.
\end_layout

\begin_layout Standard
Following a suggestion of Preacher, Curran, and Bauer (2006), the testSlopes
 function also tries to calculate the Johnson-Neyman (1936) interpretation
 of the same test.
 It presents 2 diagnostic plots, as illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ts10"

\end_inset

.
 Whereas West and Aiken would have us test the hypothesis that 
\begin_inset Formula $\hat{b}_{simple\, slope}=\hat{b}_{plotx}+b_{plotx\cdot modx}modx$
\end_inset

 is different from 0, J-N would have us ask 
\begin_inset Quotes eld
\end_inset

for which values of the moderator would the value 
\begin_inset Formula $\hat{b}_{simple\, slope}$
\end_inset

 be statistically significantly different from zero? The J-N calculation
 requires the solution an equation that is quadratic in the value of the
 moderator variable, 
\begin_inset Formula $modx$
\end_inset

.
 The interval of values of 
\begin_inset Formula $modx$
\end_inset

 associated with a statistically significant effect of 
\begin_inset Formula $plotx$
\end_inset

 on the outcome is determined from the computation of a T statistic for
 
\begin_inset Formula $\hat{b}_{simple\, slope}$
\end_inset

.
 The J-N interval is the set of values of 
\begin_inset Formula $modx$
\end_inset

 for which the following holds:
\begin_inset Formula 
\begin{equation}
\hat{t}=\frac{\hat{b}_{simple\, slope}}{std.err(\hat{b}_{simple\, slope})}=\frac{\hat{b}_{simple\, slope}}{\sqrt{\widehat{Var(\hat{b}_{plotx})}+modx^{2}\widehat{Var(\hat{b}_{plotx\cdot modx})}+2modx\widehat{Cov(\hat{b}_{plotx},\hat{b}_{plotx\cdot modx})}}}\geq T_{\frac{\alpha}{2},df}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
I am not entirely convinced that the J-N interpretation is useful, but calculati
ng it was interesting.
 Nevertheless, the output of testSlopes(m4ps) is displayed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ts10"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ts10, fig=T, echo=T>>=
\end_layout

\begin_layout Plain Layout

testSlopes(m4ps)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
testSlopes for an Interactive Model
\begin_inset CommandInset label
LatexCommand label
name "fig:ts10"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The plotPlane function offers another visualization of the mutual effect
 of two predictors in m4.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pp100"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<pp100, fig=T>>=
\end_layout

\begin_layout Plain Layout

p100 <- plotPlane(m4, plotx1="x1", plotx2="x2")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
plotPlane for the Interactive Model
\begin_inset CommandInset label
LatexCommand label
name "fig:pp100"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At some point in the future, the ability to make plotSlopes and plotPlane
 work together will be introduced.
 So the user will be able to press the plane down into the 2 dimensional
 slopes plot, or the simple slopes can be depicted in the 3 dimensional
 plane.
 A preliminary rendering of what that might look like is presented in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pp110"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<pp110, fig=T, echo=F, width=5, height=4>>=
\end_layout

\begin_layout Plain Layout

m4ps <- plotSlopes(m4, plotx="x1", modx="x2", xlab="Continuous Predictor",
 ylim=c(-25, 35))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

<<pp111, fig=T, echo=F, height=5>>=
\end_layout

\begin_layout Plain Layout

p110 <- plotPlane(m4, plotx1="x1", plotx2="x2", x1lab="Continuous Predictor")
\end_layout

\begin_layout Plain Layout

for(j in unique(m4ps$newdata$x2)){
\end_layout

\begin_layout Plain Layout

subdat <- m4ps$newdata[m4ps$newdata$x2==j,]
\end_layout

\begin_layout Plain Layout

lines(trans3d(subdat$x1, subdat$x2, subdat$pred, pmat=p110$res), col="red",
 lwd=3)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Making plotSlopes and plotPlane work Together
\begin_inset CommandInset label
LatexCommand label
name "fig:pp110"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Standardized, Mean-Centered, and Residual-Centered Regressions 
\end_layout

\begin_layout Subsection
Standardized regression
\end_layout

\begin_layout Standard
Many of us learned to conduct regression analysis with SPSS, which (historically
, at least) reported both the ordinary regression coefficients as well as
 a column of coefficients obtained from a regression in which each of the
 predictors in the design matrix had been 
\begin_inset Quotes eld
\end_inset

standardized.
\begin_inset Quotes erd
\end_inset

 That is to say, each variable, for example 
\begin_inset Formula $x1_{i}$
\end_inset

, was replaced by an estimated 
\begin_inset Formula $Z-score$
\end_inset

 
\begin_inset Formula $(x1_{i}-\overline{x1})/std.dev.(x1_{i}$
\end_inset

).
 A regression fitted with those standardized variables is said to produce
 
\begin_inset Quotes eld
\end_inset

standardized coefficients.
\begin_inset Quotes erd
\end_inset

 These standardized coefficients, dubbed 
\begin_inset Quotes eld
\end_inset

beta weights
\begin_inset Quotes erd
\end_inset

 in common parlance, were thought to set different kinds of variables onto
 a common metric.
 While this idea appears to have been in error (see, for example, King 1986),
 it still is of interest to many scholars who want to standardize their
 variables in order to compare them more easily.
 
\end_layout

\begin_layout Standard
The function standardize was included in rockchalk to facilitate lectures
 about what a researcher ought not do.
 standardize performs the complete, mindless standardization of all predictors,
 no matter whether they are categorical, interaction terms, or transformed
 values (such as logs).
 Each column of the design matrix is scaled to a new variable with mean
 0 and standard deviation 1.
 The input to standardize should be a fitted regression model.
 For example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

m4 <- lm (y4 ~ x1 * x2, data=dat)
\end_layout

\begin_layout Plain Layout

m4s <- standardize(m4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It does seem odd to me that a person would actually want a standardized
 regression of that sort, and the commentary included with the summary method
 for the standardized regression object probably makes that clear.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

summary(m4s)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparing Ordinary and Standardized Regression
\begin_inset CommandInset label
LatexCommand label
name "tab:stdreg10"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stdreg10, results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m4,m4s), tight=F, modelLabels=c("Not Standardized","Standardized"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mean-centering
\end_layout

\begin_layout Standard
In contrast with a standardized regression, a mean-centered regression is
 one in which one or more of the predictors has been 
\begin_inset Quotes eld
\end_inset

mean centered
\begin_inset Quotes erd
\end_inset

 before the design matrix is constructed.
 The rockchalk package includes a meanCenter function that can, center some
 or all of the predictors before the design matrix is constructed.
 It can also standardize those variables 
\emph on
before
\emph default
 the design matrix is constructed.
\end_layout

\begin_layout Standard
Does a regression model with mean-centered predictors have better statistical
 properties than a regression that uses the variables as they are originally
 presented.
 Some, most notably Aiken and West (1991) and Cohen, et al.
 (2002) argued that the answer is an emphatic 
\begin_inset Quotes eld
\end_inset

yes.
\begin_inset Quotes erd
\end_inset

 In retrospect, it appears this advice was mistaken, especially where the
 amelioration of multicollinearity is the primary purpose (Echambadi and
 Hess (2007)).
 Nevertheless, the issue is of more than passing interest to many applied
 researchers, who have experienced the frustration of having their results
 
\begin_inset Quotes eld
\end_inset

destroyed
\begin_inset Quotes erd
\end_inset

 by the inclusion of additional terms involving products of variables that
 are already in their models.
\end_layout

\begin_layout Standard
It is often noted (by researchers and students alike) that the estimates
 of the ordinary linear regression are affected in surprising ways by the
 introduction of nonlinear expressions.
 Suppose we begin with an ordinary linear model.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=b_{0}+b_{1}x1_{i}+b_{2}x2_{i}+e_{i}\label{eq:linear}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
Then we add, for example, a squared term, 
\begin_inset Formula 
\begin{equation}
y_{i}=b_{0}+b_{1}x1_{i}+b_{2}x2_{i}+b3x2_{i}^{2}+e_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
or an 
\begin_inset Quotes eld
\end_inset

interaction effect
\begin_inset Quotes erd
\end_inset

, 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=b_{0}+b_{1}x1_{i}+b_{2}x2_{i}+b3(x1_{i}\cdot x2_{i})+e_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
In both of these cases, practitioners have long been bothered by the fact
 that the estimate of 
\begin_inset Formula $b_{1}$
\end_inset

 or 
\begin_inset Formula $b_{2}$
\end_inset

 in model (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linear"

\end_inset

) might be 
\begin_inset Quotes eld
\end_inset

statistically significant
\begin_inset Quotes erd
\end_inset

 (significantly different from 0, that is), but when the last term is added,
 the standard errors of the estimates grow larger and 
\begin_inset Quotes eld
\end_inset

nothing is significant anymore.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Aiken and West (1991) and Cohen, et.
 al (2002) contended that the apparent instability of the coefficients is
 a reflection of 
\begin_inset Quotes eld
\end_inset

inessential collinearity
\begin_inset Quotes erd
\end_inset

 among the predictors, due to the fact that 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

 are in fact correlated with the new terms, 
\begin_inset Formula $x2^{2}$
\end_inset

 or 
\begin_inset Formula $x1\cdot x2$
\end_inset

.
 Their recommendation is that practitioners ought to mean-center those predictor
s, to replace 
\begin_inset Formula $x1$
\end_inset

 by 
\begin_inset Formula $(x1_{i}-\overline{x1})$
\end_inset

 and 
\begin_inset Formula $(x2_{i}-\overline{x2})$
\end_inset

.
 In some cases, it appears as though the use of mean-centered variables
 does indeed address the multicollinearity problem, making the t-statistics
 look 
\begin_inset Quotes eld
\end_inset

bigger
\begin_inset Quotes erd
\end_inset

 and the p values are smaller.
\end_layout

\begin_layout Standard
While the superficial evidence for mean-centering seemed compelling, it
 turns out to be a complete mirage.
 Mean-centering does not solve the problem of multicollinearity, it merely
 changes the point at which we evaluate it.
 This point is made most emphatically by Echambadi and Hess (2007), who
 argue that mean-centering has no effect (not one 
\begin_inset Quotes eld
\end_inset

iota
\begin_inset Quotes erd
\end_inset

 of an effect!) on multicollinearity.
 
\end_layout

\begin_layout Standard
In order to help students and researchers explore this controversy, the
 rockchalk includes the function meanCenter.
 Mean-centering makes it easier to tell, at a glance, the model's predicted
 value for the case that is situated at the mean.
\end_layout

\begin_layout Standard
For this example, I use a function to generate data called genCorrelatedData.
 It is included with rockchalk.
 The 
\begin_inset Quotes eld
\end_inset

true model
\begin_inset Quotes erd
\end_inset

 from which the data is produced is
\begin_inset Formula 
\begin{equation}
y_{i}=2+0.1x1_{i}+0.1x2_{i}+0.2\cdot(x1_{i}\times x2_{i})+e_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The usual 
\begin_inset Quotes eld
\end_inset

course of affairs
\begin_inset Quotes erd
\end_inset

 would observe the following sequence of events.
 Three regressions will be estimated, they are summarized in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:meancenter10-1"

\end_inset

.
 First (the first column), the researcher 
\begin_inset Quotes eld
\end_inset

explores
\begin_inset Quotes erd
\end_inset

 a linear specification,
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

lm(y ~ x1 + x2, data=dat2)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The coefficients of 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

 appear to be statistically significant, a very gratifying regression indeed.
 
\end_layout

\begin_layout Standard
\noindent
Second (the second column in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:meancenter10-1"

\end_inset

), an interaction term is added to the model.
 That interaction term, the product variables 
\begin_inset Formula $x1\times x2$
\end_inset

, is estimated in R with
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

lm(y ~ x1 * x2, data=dat2)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
This specification leads to a model that includes the main effect variables
 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

, as well as their product, which is labeled 
\begin_inset Formula $x1:x2$
\end_inset

 in the output.
 When most of us see that second column for the first time, we think 
\begin_inset Quotes eld
\end_inset

Holy Cow! My regression went to hell!
\begin_inset Quotes erd
\end_inset

 The situation does appear dire.
 While the coefficients for the variables 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

 did seem to be substantial in the first model, the introduction of the
 interactive effect renders everything statistically insignificant.
 
\end_layout

\begin_layout Standard
Now comes the 
\begin_inset Quotes eld
\end_inset

magic
\begin_inset Quotes erd
\end_inset

 of mean centering.
 If we replace 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

 with their mean centered counterparts, and then calculate the interaction
 variable as the product of those two centered variables, we get a 
\begin_inset Quotes eld
\end_inset

great
\begin_inset Quotes erd
\end_inset

 regression, which is presented in the third column of Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:meancenter10-1"

\end_inset

.
 Everything appears to be significant, order has been restored in the land
 of the more-or-less linear model.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

dat2 <- genCorrelatedData(N=400, rho=.4, stde=300, beta=c(2,0.1,0.1,0.2))
\end_layout

\begin_layout Plain Layout

m4linear <- lm (y ~ x1 + x2, data=dat2)
\end_layout

\begin_layout Plain Layout

m4int <- lm (y ~ x1 * x2, data=dat2)
\end_layout

\begin_layout Plain Layout

m4mc <- meanCenter(m4int)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparing Ordinary and Mean-Centered Regression
\begin_inset CommandInset label
LatexCommand label
name "tab:meancenter10-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mcenter10, results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m4linear, m4int,m4mc), tight=F, modelLabels=c("Linear", "Not
 Centered","Mean Centered"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is a good argument (actually an invincible argument), that the mean-center
ing effect is a complete and total illusion.
 The first piece of evidence should be that the coefficient of the interactive
 effect in columns 2 and 3 is identical.
 The root mean square and 
\begin_inset Formula $R^{2}$
\end_inset

 estimates are identical.
 And, if we look into the situation a little more closely, we find that
 the models produce identical predicted values! The 3 dimensional plots
 of the predicted values of the two models are compared in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mcenter30"

\end_inset

.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mcenter50, fig=T,echo=FALSE, height=5, width=7>>=
\end_layout

\begin_layout Plain Layout

op <- par()
\end_layout

\begin_layout Plain Layout

par(mfcol=c(1,2))
\end_layout

\begin_layout Plain Layout

par(mar=c(2,2,2,1))
\end_layout

\begin_layout Plain Layout

plotPlane(m4int, plotx1="x1", plotx2="x2", plotPoints=FALSE, main="Not Centered"
, ticktype="detailed")
\end_layout

\begin_layout Plain Layout

plotPlane(m4mc, plotx1="x1", plotx2="x2", plotPoints=FALSE, main="Mean Centered"
, ticktype="detailed")
\end_layout

\begin_layout Plain Layout

par(op)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Mean Centered and Uncentered Fits Identical
\begin_inset CommandInset label
LatexCommand label
name "fig:mcenter30"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The curves in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mcenter30"

\end_inset

 are identical, of course.
 The only difference is that the one on the left, the one for the original
 non-transformed data, has the 
\begin_inset Quotes eld
\end_inset

y axis
\begin_inset Quotes erd
\end_inset

 positioned at the front-left edge of the graph, while the centered one
 re-positions the y axis into the center of the data.
 There are two reasons why the mean-centering 
\begin_inset Quotes eld
\end_inset

seems to
\begin_inset Quotes erd
\end_inset

 help multicollinearity, when in fact it has no effect at all.
 First, an interaction model is a nonlinear model.
 The slope of an effect is different at every point in the X1,X2 plane.
 This, of course, means that multicollinearity is not a global attribute
 of the data, but rather it is a local attribute, so that the effect of
 multicollinearity is more obvious when the slope is flat than when it is
 steep.
 Since the regression fit measures multicollinearity at the origin, where
 the y axis is 
\begin_inset Quotes eld
\end_inset

stuck into the ground,
\begin_inset Quotes erd
\end_inset

 it only makes sense that re-positioning the axis would affect our assessment
 of collinearity.
 Second, the standard error of predicted values is hour-glass shaped--smaller
 in the center of the data cloud, wider at the edges.
 Students of elementary regression have no-doubt seen the confidence interval
 plot similar to Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hourglass"

\end_inset

.
 The 
\begin_inset Quotes eld
\end_inset

mean centered
\begin_inset Quotes erd
\end_inset

 regression is a snapshot of the standard errors in the small part of the
 hourglass, while the non-centered regression is a snapshot at the outer
 edge.
 They are, of course, the exact same model, and the results differ only
 superficially.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<fig=T, echo=F, height=5, width=5>>=
\end_layout

\begin_layout Plain Layout

x <- rnorm(100, m=50, s=20)
\end_layout

\begin_layout Plain Layout

y <- 3 + 0.2 * x + 15 * rnorm(100)
\end_layout

\begin_layout Plain Layout

plot(x,y)
\end_layout

\begin_layout Plain Layout

mp1 <- lm(y ~ x)
\end_layout

\begin_layout Plain Layout

abline(mp1)
\end_layout

\begin_layout Plain Layout

ndf <- data.frame(x=plotSeq(x,40))
\end_layout

\begin_layout Plain Layout

p1 <- as.data.frame(predict(mp1, interval="conf", newdata = ndf))
\end_layout

\begin_layout Plain Layout

lines(ndf$x, p1$fit, col="black", lwd=2)
\end_layout

\begin_layout Plain Layout

lines(ndf$x, p1$lwr, col="red", lwd=2, lty=4)
\end_layout

\begin_layout Plain Layout

lines(ndf$x, p1$upr, col="red", lwd=2, lty=3)
\end_layout

\begin_layout Plain Layout

legend("topleft", legend=c("predicted","conf.
 lower", "conf.
 upper"), col=c("black","red","red"), lty=c(1,4,3))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Hourglass
\begin_inset CommandInset label
LatexCommand label
name "fig:Hourglass"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Included with the rockchalk package, in the examples folder, one can find
 a file called 
\begin_inset Quotes eld
\end_inset

residualCentering.R
\begin_inset Quotes erd
\end_inset

 that walks through this argument step by step.
 In addition, I have several lectures for an intermediate regression class
 on this issue and they can be found under 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pj.freefaculty.org/guides/stat
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsection
Residual-centering
\end_layout

\begin_layout Standard
The argument against mean-centering is that it makes absolutely no difference.
 Perhaps the same cannot be said of mean-centering's cousin, 
\begin_inset Quotes eld
\end_inset

residual-centering.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Residual-centering is another way to deal with the problem that the constructed
 variable representing the interaction, 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $x1\times x2$
\end_inset

,
\begin_inset Quotes erd
\end_inset

 will sometimes cause multicollinearity, exaggerating standard errors, making
 t-statistics small and p-values big.
 
\end_layout

\begin_layout Standard
We would still like to estimate a model
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=b_{0}+b_{1}x1_{i}+b_{2}x2_{i}+b3(x1_{i}\times x2_{i})+e_{i},\label{eq:rc10}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
but we can't.
 More accurately, we can estimate it, but we don't like the results we get.
 We don't like the large standard errors and huge p-values.
\end_layout

\begin_layout Standard
So here's the plan.
 If we fit the linear model--with no interaction
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y=c_{0}+c_{1}x1+c_{2}x2+e2_{i}\label{eq:rc20}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
we get parameter estimates that we like for the effects of 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

.
 We will proceed by constraining the fitted coefficients in the full, interactiv
e model so that the main effects remain the same.
 That is to say, fit 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:rc10"

\end_inset

, but force the fit so that the coefficients of 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

 match equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:rc20"

\end_inset

.
 Effectively, we impose the restriction that 
\begin_inset Formula $\hat{b}_{1}=\hat{c}_{1}$
\end_inset

 and 
\begin_inset Formula $\hat{b}_{2}=\hat{c}_{2}$
\end_inset

.
\end_layout

\begin_layout Standard
How can this be done in a convenient, practical way? We need an estimate
 of the interaction effect that is orthogonal to (uncorrelated with) both
 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

.
 That's where residual-centering comes into the picture.
 Estimate the following regression, in which the left hand side is the interacti
on product term:
\begin_inset Formula 
\begin{equation}
(x1_{i}\times x2_{i})=d_{0}+d_{1}x1_{i}+d_{2}x2+u_{i}\label{eq:residCentered}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The residuals from that regression are, by definition, orthogonal to both
 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

.
 Let's use that residual as a new indicator of the interaction effect.
 Call it 
\begin_inset Formula $(x1Xx2).$
\end_inset

 Then we fit an equation like (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:rc10"

\end_inset

), but instead of the actual product term 
\begin_inset Formula $(x1_{i}\times x2_{i})$
\end_inset

, we include the residual from the fitted regression (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:residCentered"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=b_{0}+b_{1}x1_{i}+b_{2}x2_{i}+b3(x1Xx2)+e_{i},\label{eq:rc10-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
In essence, we have taken the interaction 
\begin_inset Formula $(x1_{i}\times x2_{i})$
\end_inset

, and purged it of its parts that are linearly related to 
\begin_inset Formula $x1_{i}$
\end_inset

 and 
\begin_inset Formula $x2_{i}$
\end_inset

 separately.
 The 
\begin_inset Quotes eld
\end_inset

residual centered
\begin_inset Quotes erd
\end_inset

 regression adds the new variable, 
\begin_inset Formula $(x1Xx2)$
\end_inset

, and it leaves the effect coefficients for variables 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

 unchanged.
 
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:residcenter10"

\end_inset

 compares the parameter estimates of the models with interaction terms.
 One is the usual, non-centered, model, and the others are the mean-centered
 and residual-centered estimates.
 One peculiar, important, fact is that the estimate of the interaction coefficie
nt is the same in all three models.
 They are not just similar.
 They are identical.
 The fact that the usual and mean-centered estimates are the same has, of
 course, been noted in Cohen, et al (2002), but the significance was missed.
 As argued in the previous section of this essay, the two models have more
 in common than just that one coefficient.
 The models--all three of them-- are actually identical.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

dat2 <- genCorrelatedData(N=400, rho=.4, stde=300, beta=c(2,0.1,0.1,0.8))
\end_layout

\begin_layout Plain Layout

m4linear <- lm (y ~ x1 + x2, data=dat2)
\end_layout

\begin_layout Plain Layout

m4int <- lm (y ~ x1 * x2, data=dat2)
\end_layout

\begin_layout Plain Layout

m4mc <- meanCenter(m4int)
\end_layout

\begin_layout Plain Layout

m4rc <- residualCenter(m4int)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparing Ordinary and Residual-Centered Regression
\begin_inset CommandInset label
LatexCommand label
name "tab:residcenter10"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<rcenter10, results=tex, echo=F>>=
\end_layout

\begin_layout Plain Layout

outreg(list(m4linear, m4int, m4mc, m4rc), tight=T, modelLabels=c("Linear",
 "Not Centered","Mean Centered", "Resid Centered"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Does the identicality of the interaction estimates indicate that the residual-ce
ntered regression is also equivalent to the mean-centered and usual specificatio
ns? It appears the answer is, 
\begin_inset Quotes eld
\end_inset

yes.
\begin_inset Quotes erd
\end_inset

 Emphatically.
 In order to make this perfectly clear, we need to calculate predicted values
 for a residual-centered regression model.
 In rockchalk-1.5.1, a predict method was introduced for that purpose.
 To calculate a prediction, it is necessary to specify the values of all
 of the predictors, and then the fitted models for each of the interactions
 is used to calculate residuals that can be used as interaction terms in
 the final model.
 
\end_layout

\begin_layout Standard
With predicted values in hand, we can demonstrate the fact that the predicted
 values from all three methods of estimating interactions are identical.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rcenter30"

\end_inset

, the three dimensional plots of the three models are presented together.
 For a given pair of input values 
\begin_inset Formula $x1_{i}$
\end_inset

 and 
\begin_inset Formula $x2_{i}$
\end_inset

, all three models offere the same prediction.
 From that, one must conclude that the three regression specifications are,
 despite the superficial differences among their estimated coefficients,
 actually the same.
 
\end_layout

\begin_layout Standard
Why do the coefficients differ if the models are actually the same? Recall
 that we are estimating the slopes of a curving plane, and so estimates
 of the marginal effects of 
\begin_inset Formula $x1$
\end_inset

 and 
\begin_inset Formula $x2$
\end_inset

 will depend on the point at which we are calculating the slopes.
 Mean-centering and residual-centering are simply competing methods for
 re-positioning the 
\begin_inset Formula $y$
\end_inset

 axis.
 The interactive model has a constant mixed partial derivative, so the estimate
 of the interaction coefficient is the same in all three models.
 The similarity of the three plots in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rcenter30"

\end_inset

 was, in all honesty, a surprise.
 Intuitively, it seems as though the residual-centered approach is different
 because the data that represents the interaction is drawn from the residuals
 of a preliminary regression.
 We have methodically re-calculated the predicted values from the residual
 centered regression.
 Through whatever method one chooses, the results are the same.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<rcenter30, fig=T,echo=FALSE, height=9, width=6>>=
\end_layout

\begin_layout Plain Layout

op <- par()
\end_layout

\begin_layout Plain Layout

par(mfrow=c(2,2))
\end_layout

\begin_layout Plain Layout

par(mar=c(2,2,2,1))
\end_layout

\begin_layout Plain Layout

plotPlane(m4int, plotx1="x1", plotx2="x2", plotPoints=TRUE, main="Not Centered",
 ticktype="detailed", theta=-20)
\end_layout

\begin_layout Plain Layout

plotPlane(m4mc, plotx1="x1", plotx2="x2", plotPoints=TRUE, main="Mean Centered",
 ticktype="detailed", theta=-20)
\end_layout

\begin_layout Plain Layout

plotPlane(m4rc, plotx1="x1", plotx2="x2", plotPoints=TRUE, main="Residual
 Centered", ticktype="detailed", theta=-20)
\end_layout

\begin_layout Plain Layout

par(op)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Mean Centered and Uncentered Fits Identical
\begin_inset CommandInset label
LatexCommand label
name "fig:rcenter30"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<rcenter40, fig=T,echo=FALSE, height=4, width=6>>=
\end_layout

\begin_layout Plain Layout

m4mcpred <- predict(m4mc, newdata=dat2)
\end_layout

\begin_layout Plain Layout

m4rcpred <- predict(m4rc, newdata=dat2)
\end_layout

\begin_layout Plain Layout

plot(m4mcpred, m4rcpred, main="", xlab="Predictions of Mean-centered Regression"
,ylab="Predictions from Residual-centered Regression")
\end_layout

\begin_layout Plain Layout

predcor <- round(cor(m4mcpred, m4rcpred),3)
\end_layout

\begin_layout Plain Layout

legend("topleft", legend=c(paste("Correlation=", predcor)))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Predicted Values of Mean and Residual-centered Models
\begin_inset CommandInset label
LatexCommand label
name "fig:rcenter40"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rcenter40"

\end_inset

, the predicted values of the mean-centered and residual-centered regressions
 are plotted against one another.
 They are perfectly co-incident, as evidenced by the fact that the correlation
 between them is 1.0.
 
\end_layout

\begin_layout Standard
The conclusion is this.
 One can code a nonlinear model in various ways, all of which are theoretically
 and analytically identical.
 There are superficial differences in the estimates of the coefficients
 of the various specifications, but these differences are understandable
 in light of the changes in the design matrix.
 The connection between the observed values of the predictors and the predicted
 values remains the same in all of these specifications.
\end_layout

\begin_layout Standard
Consider the following derivation.
 The ordinary model is
\begin_inset Formula 
\begin{equation}
y_{i}=b_{0}+b_{1}x1_{i}+b_{2}x2_{i}+b3(x1_{i}\times x2_{i})+e1_{i}\label{eq:int}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The mean-centered model is 
\begin_inset Formula 
\begin{equation}
y_{i}=c_{0}+c_{1}(x1_{i}-\overline{x1})+c_{2}(x2_{i}-\overline{x2})+c_{3}(x1_{i}-\overline{x1})\times(x2_{i}-\overline{x2})+e2_{i}\label{eq:mc1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
In order to compare with equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:int"

\end_inset

, we would re-arrange like so
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=c_{0}+c_{1}(x1_{i})-c_{1}\overline{x1}+c_{2}(x2_{i})-c_{2}\overline{x2}+c_{3}(x1_{i}x2_{i}+\overline{x1}\overline{x2}-\overline{x1}x2_{i}-\overline{x2}x1_{i})+e2_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=c_{0}+c_{1}(x1_{i})-c_{1}\overline{x1}+c_{2}(x2_{i})-c_{2}\overline{x2}+c_{3}(x1_{i}x2_{i})+c_{3}\overline{x1}\overline{x2}-c_{3}\overline{x1}x2_{i}-c_{3}\overline{x2}x1_{i})+e2_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=\{c_{0}-c_{1}\overline{x1}-c_{2}\overline{x2}+c_{3}\overline{x1}\overline{x2}\}+\{c_{1}-c_{3}\overline{x2}\}x1_{i}+\{c_{2}-c_{3}\overline{x1}\}x2_{i}+c_{3}(x1_{i}x2_{i})+e2_{i}\label{eq:mc3}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
One can then compare the parameter estimates from equations 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:int"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:mc3"

\end_inset

 in order to understand the observed changes in fitted coefficients after
 changing from the ordinary to the mean-centered coding.
 Both 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:int"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:mc3"

\end_inset

 include a single parameter times 
\begin_inset Formula $(x1_{i}x2_{i}),$
\end_inset

 leading one to expect that the estimate 
\begin_inset Formula $\hat{b}_{3}$
\end_inset

 should be equal to the estimate of 
\begin_inset Formula $\hat{c}_{3}$
\end_inset

 (and they are, as we have found).
 Less obviously, one can use the fitted coefficients from either model to
 deduce the fitted coefficients from the other.
 The following equalities describe that relationship.
\begin_inset Formula 
\begin{eqnarray}
\hat{b}_{0} & = & \hat{c}_{0}-\hat{c}_{1}\overline{x1}-\hat{c}_{2}\overline{x2}+\hat{c}_{3}\overline{x1}\overline{x2}\\
\hat{b}_{1} & = & \hat{c}_{1}-\hat{c}_{3}\overline{x2}\\
\hat{b}_{2} & = & \hat{c}_{2}-\hat{c}_{3}\overline{x1}\\
\hat{b}_{3} & = & \hat{c}_{3}
\end{eqnarray}

\end_inset

The estimated fit of equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:mc1"

\end_inset

 would provide estimated coefficients 
\begin_inset Formula $\hat{c}_{j}$
\end_inset

, 
\begin_inset Formula $j=0,...,3$
\end_inset

, which would then be used to calculate the estimates from the noncentered
 model.
\end_layout

\begin_layout Standard
The residual centered model requires two steps.
 First, estimate a regression 
\begin_inset Formula 
\begin{equation}
(x1_{i}\times x2_{i})=d_{0}+d_{1}x1_{i}+d_{2}x2_{i}+u_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
from which the predicted value can be calculated:
\begin_inset Formula 
\begin{equation}
\widehat{(x1_{i}\times x2_{i})}=\hat{d}_{0}+\hat{d}_{1}x1_{i}+\hat{d}_{2}x2_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
The difference between the observed product, 
\begin_inset Formula $x1_{i}\times x2_{i}$
\end_inset

 and the predicted value from that model, 
\begin_inset Formula $\widehat{x1_{i}\times x2_{i}}$
\end_inset

, is the 
\begin_inset Quotes eld
\end_inset

residual-centered estimate,
\begin_inset Quotes erd
\end_inset

 which is used as a predictor in place of 
\begin_inset Formula $(x1_{i}\times x2_{i})$
\end_inset

 in equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:int"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{i}=h_{0}+h_{1}x1_{i}+h_{2}x2_{i}+h_{3}\{x1_{i}\times x2_{i}-\widehat{x1_{i}\times x2_{i}}\}+e3_{i}\label{eq:rc1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Replacing 
\begin_inset Formula $\widehat{x1_{i}\times x2_{i}}$
\end_inset

 with 
\begin_inset Formula $\hat{d}_{0}+\hat{d}_{1}x1_{i}+\hat{d}_{2}x2_{i}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
y_{i} & = & h_{0}+h_{1}x1_{i}+h_{2}x2_{i}+h_{3}\{x1_{i}\times x2_{i}-\hat{d}_{0}-\hat{d}_{1}x1_{i}-\hat{d}_{2}x2_{i}\}+e3_{i}\\
 & = & h_{0}+h_{1}x1_{i}+h_{2}x2_{i}+h_{3}\{x1_{i}\times x2_{i}\}-h_{3}\hat{d}_{0}-h_{3}\hat{d}_{1}x1_{i}-h_{3}\hat{d}_{2}x2_{i}\}+e3_{i}\\
 &  & \{h_{0}-h_{3}\hat{d}_{0}\}+\{h_{1}-h_{3}\hat{d}_{1}\}x1_{i}+\{h_{2}-h_{3}\hat{d}_{2}\}x2_{i}+h_{3}\{x1_{i}\times x2_{i}\}+e3_{i}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
As in the previous comparison of models, we can translate coefficient estimates
 between the ordinary specification and the residual-centered model.
 The coefficient estimated for the product term, 
\begin_inset Formula $\hat{h}_{3}$
\end_inset

, should be equal to 
\begin_inset Formula $\hat{b}_{3}$
\end_inset

 and 
\begin_inset Formula $\hat{c}_{3}$
\end_inset

 (and it is!).
 If we fit the residual centered model, 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:rc1"

\end_inset

, we can re-generate the coefficients of the other models like so: 
\begin_inset Formula 
\begin{eqnarray}
b_{0} & =\hat{c}_{0}-\hat{c}_{1}\overline{x1}-\hat{c}_{2}\overline{x2}+\hat{c}_{3}\overline{x1}\overline{x2}= & h_{0}-h_{3}\hat{d}_{0}\\
b_{1} & =\hat{c}_{1}-\hat{c}_{3}\overline{x2}= & h_{1}-h_{3}\hat{d}_{1}\\
b_{2} & =\hat{c}_{2}-\hat{c}_{3}\overline{x1}= & h_{2}-h_{3}\hat{d}_{2}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Little, T.
 D., Bovaird, J.
 A., and Widaman, K.
 F.
 (2006).
 On the Merits of Orthogonalizing Powered and Product Terms: Implications
 for Modeling Interactions Among Latent Variables.
 Structural Equation Modeling, 13(4), 497-519.
\end_layout

\end_body
\end_document
